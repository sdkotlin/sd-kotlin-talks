<?xml version="1.0" ?>
<SmellBaseline>
	<ManuallySuppressedIssues></ManuallySuppressedIssues>
	<CurrentIssues>
		<ID>CyclomaticComplexMethod:NullSafetyInKotlin.kt$fun main()</ID>
		<ID>EmptyFunctionBlock:FunctionsInKotlin.kt${}</ID>
		<ID>ForEachOnRange:CoroutinesInKotlin.kt$1..ONE_MILLION</ID>
		<ID>ForEachOnRange:IterationInKotlin.kt$1 until 5</ID>
		<ID>ForEachOnRange:IterationInKotlin.kt$1..5</ID>
		<ID>ForbiddenComment:ReflectionInKotlin.kt$// TODO: Add reflection example for Kotlin.</ID>
		<ID>ForbiddenComment:ScopingFunctionsInKotlin.kt$// TODO: Add scoping functions example for Kotlin.</ID>
		<ID>ForbiddenComment:TailRecursionInKotlin.kt$// TODO: Why does stack depth change and why does this not succeed?</ID>
		<ID>FunctionNaming:AnnotationsInKotlin.kt$fun `with deprecation`()</ID>
		<ID>FunctionNaming:DataClassesInKotlin.kt$fun `with component and copy functions`()</ID>
		<ID>FunctionNaming:DataClassesInKotlin.kt$fun `with data classes in the standard library`()</ID>
		<ID>FunctionNaming:DataClassesInKotlin.kt$fun `with equals, hashCode, and toString`()</ID>
		<ID>FunctionNaming:DataClassesInKotlin.kt$fun `with private data class constructor`()</ID>
		<ID>FunctionNaming:DelegationInKotlin.kt$fun `creating property delegates`()</ID>
		<ID>FunctionNaming:DelegationInKotlin.kt$fun `with delegates`()</ID>
		<ID>FunctionNaming:DelegationInKotlin.kt$fun `with deprecated property delegation`()</ID>
		<ID>FunctionNaming:DelegationInKotlin.kt$fun `with lateInit`()</ID>
		<ID>FunctionNaming:DelegationInKotlin.kt$fun `with the Lazy property delegate`()</ID>
		<ID>FunctionNaming:DelegationInKotlin.kt$fun `with the NotNull property delegate`()</ID>
		<ID>FunctionNaming:DelegationInKotlin.kt$fun `with the Observable property delegate`()</ID>
		<ID>FunctionNaming:DelegationInKotlin.kt$fun `with the Vetoable property delegate`()</ID>
		<ID>FunctionNaming:DelegationInKotlin.kt$fun `with the map-backed property delegate`()</ID>
		<ID>FunctionNaming:DelegationInKotlin.kt$fun `with the mutable map-backed property delegate`()</ID>
		<ID>FunctionNaming:EnumsInKotlin.kt$fun `while driving`(light: TrafficLight)</ID>
		<ID>FunctionNaming:EnumsInKotlin.kt$fun `with states`()</ID>
		<ID>FunctionNaming:GenericsInKotlin.kt$fun `better give and receive`()</ID>
		<ID>FunctionNaming:GenericsInKotlin.kt$fun `gift anything`()</ID>
		<ID>FunctionNaming:GenericsInKotlin.kt$fun `give and receive FAIL`()</ID>
		<ID>FunctionNaming:GenericsInKotlin.kt$fun `only from Mom`()</ID>
		<ID>FunctionNaming:GenericsInKotlin.kt$fun `only open on your birthday`()</ID>
		<ID>FunctionNaming:InfixFunctionsInKotlin.kt$infix fun Int.`+-`(other: Int)</ID>
		<ID>FunctionNaming:VarianceInKotlin.kt$fun `with array and collection variance`()</ID>
		<ID>FunctionNaming:VarianceInKotlin.kt$fun `with consumers`()</ID>
		<ID>FunctionNaming:VarianceInKotlin.kt$fun `with producers`()</ID>
		<ID>FunctionNaming:VarianceInKotlin.kt$fun `with simple container variance`()</ID>
		<ID>FunctionNaming:VarianceInKotlin.kt$fun `with star projections`()</ID>
		<ID>FunctionNaming:VarianceInKotlin.kt$fun `with substitution`()</ID>
		<ID>FunctionNaming:VarianceInKotlin.kt$fun `with use-site variance`()</ID>
		<ID>FunctionOnlyReturningConstant:AnnotationsInKotlin.kt$@ArrayAnnotation(["One", "Two"]) fun arrayAnnotations()</ID>
		<ID>FunctionOnlyReturningConstant:AnnotationsInKotlin.kt$@MetaGreat(InherentlyGreat()) fun greatness()</ID>
		<ID>FunctionOnlyReturningConstant:AnnotationsInKotlin.kt$@RedundantAnnotation @RedundantAnnotation fun test()</ID>
		<ID>FunctionOnlyReturningConstant:AnnotationsInKotlin.kt$@Suppress("unused") fun notUsed()</ID>
		<ID>FunctionOnlyReturningConstant:AnnotationsInKotlin.kt$@Suppress(unused) fun alsoUnused()</ID>
		<ID>FunctionOnlyReturningConstant:AnnotationsInKotlin.kt$@Valuable("This much") fun valuation()</ID>
		<ID>FunctionOnlyReturningConstant:AnnotationsInKotlin.kt$@VarargAnnotation("One", "Two") fun varagAnnotations()</ID>
		<ID>FunctionOnlyReturningConstant:ExtensionFunctionsInKotlin.kt$fun Animal.name()</ID>
		<ID>FunctionOnlyReturningConstant:ExtensionFunctionsInKotlin.kt$fun Lion.name()</ID>
		<ID>FunctionOnlyReturningConstant:HigherOrderFunctionsAndLambdasInKotlin.kt$fun theBoss()</ID>
		<ID>FunctionOnlyReturningConstant:StaticInKotlin.kt$StaticInKotlin$fun instanceFunction()</ID>
		<ID>FunctionOnlyReturningConstant:TddInKotlin.kt$TddInKotlin$fun weCanDoIt()</ID>
		<ID>FunctionOnlyReturningConstant:UnionTypesInKotlin.kt$Garbage$fun throwAway()</ID>
		<ID>FunctionOnlyReturningConstant:Utilities.kt$internal fun itsYourBirthday()</ID>
		<ID>InvalidPackageDeclaration:PackagesInKotlin.kt$package somewhere.over.the.rainbow</ID>
		<ID>InvalidRange:RangesInKotlin.kt$1..0</ID>
		<ID>LongMethod:NullSafetyInKotlin.kt$fun main()</ID>
		<ID>MagicNumber:ArraysInKotlin.kt$100</ID>
		<ID>MagicNumber:ArraysInKotlin.kt$200</ID>
		<ID>MagicNumber:ArraysInKotlin.kt$3</ID>
		<ID>MagicNumber:ArraysInKotlin.kt$3.0</ID>
		<ID>MagicNumber:ArraysInKotlin.kt$300</ID>
		<ID>MagicNumber:ArraysInKotlin.kt$4</ID>
		<ID>MagicNumber:ArraysInKotlin.kt$5</ID>
		<ID>MagicNumber:ArraysInKotlin.kt$6</ID>
		<ID>MagicNumber:CollectionsInKotlin.kt$10</ID>
		<ID>MagicNumber:CollectionsInKotlin.kt$100</ID>
		<ID>MagicNumber:CollectionsInKotlin.kt$3</ID>
		<ID>MagicNumber:DelegationInKotlin.kt$1025</ID>
		<ID>MagicNumber:DelegationInKotlin.kt$3</ID>
		<ID>MagicNumber:EnumsInKotlin.kt$40</ID>
		<ID>MagicNumber:EnumsInKotlin.kt$TrafficLight.CAUTION$5</ID>
		<ID>MagicNumber:EnumsInKotlin.kt$TrafficLight.GO$30</ID>
		<ID>MagicNumber:EnumsInKotlin.kt$TrafficLight.STOP$20</ID>
		<ID>MagicNumber:EnumsInKotlin.kt$Trio.BASS$4</ID>
		<ID>MagicNumber:EnumsInKotlin.kt$Trio.GUITAR$6</ID>
		<ID>MagicNumber:FunctionsInKotlin.kt$3</ID>
		<ID>MagicNumber:GenericsInKotlin.kt$36</ID>
		<ID>MagicNumber:HigherOrderFunctionsAndLambdasInKotlin.kt$113</ID>
		<ID>MagicNumber:HigherOrderFunctionsAndLambdasInKotlin.kt$3</ID>
		<ID>MagicNumber:HigherOrderFunctionsAndLambdasInKotlin.kt$355</ID>
		<ID>MagicNumber:HigherOrderFunctionsAndLambdasInKotlin.kt$4</ID>
		<ID>MagicNumber:InlineClassesInKotlin.kt$100</ID>
		<ID>MagicNumber:InlineClassesInKotlin.kt$3</ID>
		<ID>MagicNumber:IterationInKotlin.kt$5</ID>
		<ID>MagicNumber:NullSafetyInKotlin.kt$16</ID>
		<ID>MagicNumber:RangesInKotlin.kt$10</ID>
		<ID>MagicNumber:RangesInKotlin.kt$10.5</ID>
		<ID>MagicNumber:RangesInKotlin.kt$10.5f</ID>
		<ID>MagicNumber:RangesInKotlin.kt$10L</ID>
		<ID>MagicNumber:RangesInKotlin.kt$11</ID>
		<ID>MagicNumber:RangesInKotlin.kt$12</ID>
		<ID>MagicNumber:RangesInKotlin.kt$19</ID>
		<ID>MagicNumber:RangesInKotlin.kt$20</ID>
		<ID>MagicNumber:RangesInKotlin.kt$2020</ID>
		<ID>MagicNumber:RangesInKotlin.kt$3</ID>
		<ID>MagicNumber:RangesInKotlin.kt$31</ID>
		<ID>MagicNumber:RangesInKotlin.kt$4</ID>
		<ID>MagicNumber:RangesInKotlin.kt$6</ID>
		<ID>MagicNumber:SelectionInKotlin.kt$10</ID>
		<ID>MagicNumber:SelectionInKotlin.kt$100</ID>
		<ID>MagicNumber:SequencesInKotlin.kt$10</ID>
		<ID>MagicNumber:SequencesInKotlin.kt$100</ID>
		<ID>MagicNumber:SequencesInKotlin.kt$1000</ID>
		<ID>MagicNumber:SequencesInKotlin.kt$5</ID>
		<ID>MagicNumber:SequencesInKotlin.kt$50</ID>
		<ID>MagicNumber:TailRecursionDebugging.kt$10</ID>
		<ID>MagicNumber:TailRecursionDebugging.kt$15</ID>
		<ID>MagicNumber:TailRecursionInKotlin.kt$5</ID>
		<ID>MagicNumber:UnionTypesInKotlin.kt$127</ID>
		<ID>MagicNumber:UnionTypesInKotlin.kt$3</ID>
		<ID>MagicNumber:UnionTypesInKotlin.kt$4</ID>
		<ID>MagicNumber:VarianceInKotlin.kt$&lt;no name provided&gt;$5</ID>
		<ID>MagicNumber:VarianceInKotlin.kt$NaiveTester$5</ID>
		<ID>MatchingDeclarationName:ImportsInKotlin.kt$Thing1</ID>
		<ID>MatchingDeclarationName:OperatorOverloadingInKotlin.kt$Zebra</ID>
		<ID>MayBeConst:ConstantsInKotlin.kt$@JvmField val JVM_FIELD_VAL = "Testing @JvmField val"</ID>
		<ID>MayBeConst:ConstantsInKotlin.kt$ConstantsInKotlinObject$val OBJECT_VAL = "val in object"</ID>
		<ID>MayBeConst:ConstantsInKotlin.kt$private val PRIVATE_VAL = "private val"</ID>
		<ID>MayBeConst:ConstantsInKotlin.kt$val REGULAR_VAL = "val"</ID>
		<ID>MayBeConst:ConstantsInKotlinCompanion.kt$ConstantsInKotlinCompanion.Companion$@JvmField val COMPANION_JVM_FIELD_VAL = "Testing @JvmField val in object"</ID>
		<ID>MayBeConst:ConstantsInKotlinObject.kt$ConstantsInKotlinObject$@JvmField val OBJECT_JVM_FIELD_VAL = "Testing @JvmField val in object"</ID>
		<ID>MayBeConst:HigherOrderFunctionsAndLambdasInKotlin.kt$val almostPi = 355 / 113</ID>
		<ID>MayBeConst:UnsignedTypesInKotlin.kt$val binUByte: UByte = 0b0000_0001u</ID>
		<ID>MayBeConst:UnsignedTypesInKotlin.kt$val hexUByte: UByte = 0x01u</ID>
		<ID>MayBeConst:UnsignedTypesInKotlin.kt$val uByte: UByte = 255u // or uppercase 255U</ID>
		<ID>MayBeConst:UnsignedTypesInKotlin.kt$val uInt = 0u // UInt inferred type if literal fits</ID>
		<ID>MayBeConst:UnsignedTypesInKotlin.kt$val uLong = 0xFF_FF_FF_FF_01u // ULong inferred when literal doesn't fit UInt</ID>
		<ID>MayBeConst:VariablesAndTypesInKotlin.kt$val boolean = false // Boolean</ID>
		<ID>MayBeConst:VariablesAndTypesInKotlin.kt$val byte: Byte = 0 // Byte, type required because no literal</ID>
		<ID>MayBeConst:VariablesAndTypesInKotlin.kt$val character = 'c' // Char, can't be treated as a number</ID>
		<ID>MayBeConst:VariablesAndTypesInKotlin.kt$val double = 0.0 // Double, 'd/D' not supported</ID>
		<ID>MayBeConst:VariablesAndTypesInKotlin.kt$val float = 0.0f // Float, 'F' also supported</ID>
		<ID>MayBeConst:VariablesAndTypesInKotlin.kt$val i = 0</ID>
		<ID>MayBeConst:VariablesAndTypesInKotlin.kt$val integer = 0 // Int</ID>
		<ID>MayBeConst:VariablesAndTypesInKotlin.kt$val long = 0L // Long, lowercase 'l' not supported</ID>
		<ID>PackageNaming:AbstractClassesInKotlin.kt$package org.sdkotlin.intro.kotlin._19_abstractclasses</ID>
		<ID>PackageNaming:AiNPC.kt$package org.sdkotlin.intro.kotlin._30_sealedtypes.otherpackage</ID>
		<ID>PackageNaming:AnnotationsInKotlin.kt$package org.sdkotlin.intro.kotlin._31_annotations</ID>
		<ID>PackageNaming:ArraysInKotlin.kt$package org.sdkotlin.intro.kotlin._24_arrays</ID>
		<ID>PackageNaming:ClassesInKotlin.kt$package org.sdkotlin.intro.kotlin._00_classes</ID>
		<ID>PackageNaming:CollectionsInKotlin.kt$package org.sdkotlin.intro.kotlin._26_collections</ID>
		<ID>PackageNaming:ConstantsInKotlin.kt$package org.sdkotlin.intro.kotlin._17_constants</ID>
		<ID>PackageNaming:ConstantsInKotlin.kt$package org.sdkotlin.javainterop._XX_constants</ID>
		<ID>PackageNaming:ConstantsInKotlinCompanion.kt$package org.sdkotlin.javainterop._XX_constants</ID>
		<ID>PackageNaming:ConstantsInKotlinObject.kt$package org.sdkotlin.javainterop._XX_constants</ID>
		<ID>PackageNaming:ConstructorsAndInitializersInKotlin.kt$package org.sdkotlin.intro.kotlin._13_constructors</ID>
		<ID>PackageNaming:CoroutinesInKotlin.kt$package org.sdkotlin.intro.kotlin._XX_coroutines</ID>
		<ID>PackageNaming:DataClassesInKotlin.kt$package org.sdkotlin.intro.kotlin._14_0_dataclasses</ID>
		<ID>PackageNaming:DelegationInKotlin.kt$package org.sdkotlin.intro.kotlin._32_delegation</ID>
		<ID>PackageNaming:EnumsInKotlin.kt$package org.sdkotlin.intro.kotlin._29_enums</ID>
		<ID>PackageNaming:EqualityInKotlin.kt$package org.sdkotlin.intro.kotlin._07_equality</ID>
		<ID>PackageNaming:ExtensionFunctionScopingInKotlin.kt$package org.sdkotlin.intro.kotlin._08_3_extensionfunctions.otherpackage</ID>
		<ID>PackageNaming:ExtensionFunctionsInKotlin.kt$package org.sdkotlin.intro.kotlin._08_3_extensionfunctions</ID>
		<ID>PackageNaming:FunctionsInKotlin.kt$package org.sdkotlin.intro.kotlin._08_0_functions</ID>
		<ID>PackageNaming:GenericsInKotlin.kt$package org.sdkotlin.intro.kotlin._23_generics</ID>
		<ID>PackageNaming:HelloKotlin.kt$package org.sdkotlin.intro.kotlin._02_helloworld</ID>
		<ID>PackageNaming:HelloWithArgs.kt$package org.sdkotlin.intro.kotlin._02_helloworld.withargs</ID>
		<ID>PackageNaming:HigherOrderFunctionsAndLambdasInKotlin.kt$package org.sdkotlin.intro.kotlin._08_1_higherorderfunctions</ID>
		<ID>PackageNaming:ImportsInKotlin.kt$package org.sdkotlin.intro.kotlin._04_imports</ID>
		<ID>PackageNaming:InfixFunctionsInKotlin.kt$package org.sdkotlin.intro.kotlin._08_5_infixfunctions</ID>
		<ID>PackageNaming:InheritanceInKotlin.kt$package org.sdkotlin.intro.kotlin._18_inheritance</ID>
		<ID>PackageNaming:InlineClassesInKotlin.kt$package org.sdkotlin.intro.kotlin._14_1_inlineclasses</ID>
		<ID>PackageNaming:InterfacesInKotlin.kt$package org.sdkotlin.intro.kotlin._20_interfaces</ID>
		<ID>PackageNaming:IterationInKotlin.kt$package org.sdkotlin.intro.kotlin._11_iteration</ID>
		<ID>PackageNaming:LateInit.kt$package org.sdkotlin.intro.kotlin._32_delegation</ID>
		<ID>PackageNaming:NullSafetyInKotlin.kt$package org.sdkotlin.intro.kotlin._22_nullsafety</ID>
		<ID>PackageNaming:OperatorOverloadingInKotlin.kt$package org.sdkotlin.intro.kotlin._08_4_operatorfunctions</ID>
		<ID>PackageNaming:OtherPackagePlayer.kt$package org.sdkotlin.intro.kotlin._30_sealedtypes.otherpackage</ID>
		<ID>PackageNaming:PolyglotPersonTest.kt$package org.sdkotlin.intro.kotlin._14_0_dataclasses</ID>
		<ID>PackageNaming:PropertiesInKotlin.kt$package org.sdkotlin.intro.kotlin._12_properties</ID>
		<ID>PackageNaming:RangesInKotlin.kt$package org.sdkotlin.intro.kotlin._09_ranges</ID>
		<ID>PackageNaming:ReflectionInKotlin.kt$package org.sdkotlin.intro.kotlin._XX_reflection</ID>
		<ID>PackageNaming:ScopingFunctionsInKotlin.kt$package org.sdkotlin.intro.kotlin._XX_scopingfunctions</ID>
		<ID>PackageNaming:SealedTypesInKotlin.kt$package org.sdkotlin.intro.kotlin._30_sealedtypes</ID>
		<ID>PackageNaming:SelectionInKotlin.kt$package org.sdkotlin.intro.kotlin._10_selection</ID>
		<ID>PackageNaming:SequencesInKotlin.kt$package org.sdkotlin.intro.kotlin._27_sequences</ID>
		<ID>PackageNaming:SingletonInKotlin.kt$package org.sdkotlin.intro.kotlin._15_singletons</ID>
		<ID>PackageNaming:SmartCastsInKotlin.kt$package org.sdkotlin.intro.kotlin._21_smartcasts</ID>
		<ID>PackageNaming:StaticInKotlin.kt$package org.sdkotlin.intro.kotlin._16_static</ID>
		<ID>PackageNaming:StringsInKotlin.kt$package org.sdkotlin.intro.kotlin._06_strings</ID>
		<ID>PackageNaming:TailRecursionDebugging.kt$package org.sdkotlin.intro.kotlin._08_2_tailrecursivefunctions</ID>
		<ID>PackageNaming:TailRecursionInKotlin.kt$package org.sdkotlin.intro.kotlin._08_2_tailrecursivefunctions</ID>
		<ID>PackageNaming:TddInKotlin.kt$package org.sdkotlin.intro.kotlin._XX_tdd</ID>
		<ID>PackageNaming:TddInKotlinTest.kt$package org.sdkotlin.intro.kotlin._XX_tdd</ID>
		<ID>PackageNaming:Thing1.kt$package org.sdkotlin.intro.kotlin._04_imports.otherpackage</ID>
		<ID>PackageNaming:TopLevelInKotlin.kt$package org.sdkotlin.intro.kotlin._03_toplevel</ID>
		<ID>PackageNaming:TopLevelUsageInKotlin.kt$package org.sdkotlin.intro.kotlin._03_toplevel.usage</ID>
		<ID>PackageNaming:TryWithResourcesInKotlin.kt$package org.sdkotlin.intro.kotlin._XX_try_w_resources</ID>
		<ID>PackageNaming:UnionTypesInKotlin.kt$package org.sdkotlin.intro.kotlin._XX_uniontypes</ID>
		<ID>PackageNaming:UnknownPlayer.kt$package org.sdkotlin.intro.kotlin._30_sealedtypes</ID>
		<ID>PackageNaming:UnsignedTypesInKotlin.kt$package org.sdkotlin.intro.kotlin._05_1_unsigned_types</ID>
		<ID>PackageNaming:Utilities.kt$package org.sdkotlin.intro.kotlin._23_generics.util</ID>
		<ID>PackageNaming:VarargsInKotlin.kt$package org.sdkotlin.intro.kotlin._25_varargfunctions</ID>
		<ID>PackageNaming:VariablesAndTypesInKotlin.kt$package org.sdkotlin.intro.kotlin._05_0_variables_and_types</ID>
		<ID>PackageNaming:VarianceInKotlin.kt$package org.sdkotlin.intro.kotlin._28_variance</ID>
		<ID>PrintStackTrace:TryWithResourcesInKotlin.kt$e</ID>
		<ID>SerialVersionUIDInSerializableClass:InterfacesInKotlin.kt$Circle : ShapeSerializable</ID>
		<ID>SerialVersionUIDInSerializableClass:InterfacesInKotlin.kt$Triangle : ShapeSerializable</ID>
		<ID>SpreadOperator:VarargsInKotlin.kt$(*arrayOfThings)</ID>
		<ID>SwallowedException:CoroutinesInKotlin.kt$e: OutOfMemoryError</ID>
		<ID>SwallowedException:NullSafetyInKotlin.kt$e: IllegalStateException</ID>
		<ID>SwallowedException:NullSafetyInKotlin.kt$e: NullPointerException</ID>
		<ID>SwallowedException:SequencesInKotlin.kt$e: NullPointerException</ID>
		<ID>SwallowedException:SmartCastsInKotlin.kt$e: ClassCastException</ID>
		<ID>SwallowedException:TailRecursionInKotlin.kt$e: StackOverflowError</ID>
		<ID>TooGenericExceptionCaught:ArraysInKotlin.kt$e: ArrayIndexOutOfBoundsException</ID>
		<ID>TooGenericExceptionCaught:NullSafetyInKotlin.kt$e: NullPointerException</ID>
		<ID>TooGenericExceptionCaught:SequencesInKotlin.kt$e: NullPointerException</ID>
		<ID>TooManyFunctions:AnnotationsInKotlin.kt$org.sdkotlin.intro.kotlin._31_annotations.AnnotationsInKotlin.kt</ID>
		<ID>TooManyFunctions:DelegationInKotlin.kt$org.sdkotlin.intro.kotlin._32_delegation.DelegationInKotlin.kt</ID>
		<ID>TooManyFunctions:FunctionsInKotlin.kt$org.sdkotlin.intro.kotlin._08_0_functions.FunctionsInKotlin.kt</ID>
		<ID>TopLevelPropertyNaming:AnnotationsInKotlin.kt$const val unused = "unused"</ID>
		<ID>UnusedPrivateProperty:ArraysInKotlin.kt$val arrayOfNullableInts: Array&lt;Int?&gt; = arrayOf(1, null, 3)</ID>
		<ID>UnusedPrivateProperty:ArraysInKotlin.kt$val booleanArray: BooleanArray = booleanArrayOf(true, false, true)</ID>
		<ID>UnusedPrivateProperty:ArraysInKotlin.kt$val intArray: IntArray = intArrayOf(1, 2, 3)</ID>
		<ID>UnusedPrivateProperty:ArraysInKotlin.kt$val noInts = emptyArray&lt;Int&gt;()</ID>
		<ID>UnusedPrivateProperty:ArraysInKotlin.kt$val noStrings = emptyArray&lt;String&gt;()</ID>
		<ID>UnusedPrivateProperty:ArraysInKotlin.kt$val nullInts = arrayOfNulls&lt;Int&gt;(size = 10)</ID>
		<ID>UnusedPrivateProperty:ArraysInKotlin.kt$val numerals = Array(size = 10) { index -&gt; index.toString() }</ID>
		<ID>UnusedPrivateProperty:ArraysInKotlin.kt$val randomInts = Array(size = 10) { (1..100).random() }</ID>
		<ID>UnusedPrivateProperty:CollectionsInKotlin.kt$val arrayListOfInts = arrayListOf(1, 2, 3).toList()</ID>
		<ID>UnusedPrivateProperty:CollectionsInKotlin.kt$val fastMap = mutableMapOf&lt;Int, String&gt;().also { it[1] = "1" it[2] = "2" it[3] = "3" }.toMap()</ID>
		<ID>UnusedPrivateProperty:CollectionsInKotlin.kt$val hashMapOfIntsToStrings = hashMapOf(1 to "1", 2 to "2", 3 to "3").toMap()</ID>
		<ID>UnusedPrivateProperty:CollectionsInKotlin.kt$val hashSetOfInts = hashSetOf(1, 2, 3).toSet()</ID>
		<ID>UnusedPrivateProperty:CollectionsInKotlin.kt$val listOfStrings = List(10) { index -&gt; index.toString() }</ID>
		<ID>UnusedPrivateProperty:CollectionsInKotlin.kt$val mapOfIntsToStrings = mapOf(1 to "1", 2 to "2", 3 to "3")</ID>
		<ID>UnusedPrivateProperty:CollectionsInKotlin.kt$val mutableListOfStrings = MutableList(10) { index -&gt; index.toString() }</ID>
		<ID>UnusedPrivateProperty:CollectionsInKotlin.kt$val secondListOfInts = mutableCopiedListOfInts.toList()</ID>
		<ID>UnusedPrivateProperty:CollectionsInKotlin.kt$val setOfInts = setOf(1, 2, 3)</ID>
		<ID>UnusedPrivateProperty:ConstantsInKotlin.kt$private val PRIVATE_VAL = "private val"</ID>
		<ID>UnusedPrivateProperty:ConstructorsAndInitializersInKotlin.kt$val han = Rebel("Han", false)</ID>
		<ID>UnusedPrivateProperty:ConstructorsAndInitializersInKotlin.kt$val jabba = Hutt("Jabba", true)</ID>
		<ID>UnusedPrivateProperty:ConstructorsAndInitializersInKotlin.kt$val luke = Rebel("Luke", true)</ID>
		<ID>UnusedPrivateProperty:ConstructorsAndInitializersInKotlin.kt$val vader = Imperial("Darth Vader", true)</ID>
		<ID>UnusedPrivateProperty:ConstructorsAndInitializersInKotlin.kt$val wicket = Ewok("Wicket")</ID>
		<ID>UnusedPrivateProperty:GenericsInKotlin.kt$val amountOfPie = gift * 36 // `gift` is a `Double` now, so good to go.</ID>
		<ID>UnusedPrivateProperty:GenericsInKotlin.kt$val amountOfPie = gift?.times(36) ?: 0.0</ID>
		<ID>UnusedPrivateProperty:GenericsInKotlin.kt$val largeSurprise = generousGift.asPresent()</ID>
		<ID>UnusedPrivateProperty:GenericsInKotlin.kt$val perishableSurprise = yummyGift.asPresent()</ID>
		<ID>UnusedPrivateProperty:NullSafetyInKotlin.kt$val definitelyGreatGazoo = GreatGazoo()</ID>
		<ID>UnusedPrivateProperty:NullSafetyInKotlin.kt$val maybeGreatGazoo: GreatGazoo? = null</ID>
		<ID>UnusedPrivateProperty:NullSafetyInKotlin.kt$val requiredName = nullableName ?: throw IllegalArgumentException("More specific than a NPE.")</ID>
		<ID>UnusedPrivateProperty:NullSafetyInKotlin.kt$var age = 16</ID>
		<ID>UnusedPrivateProperty:NullSafetyInKotlin.kt$var nullableAge: Int?</ID>
		<ID>UnusedPrivateProperty:RangesInKotlin.kt$val doubleRange = 1.0..10.5</ID>
		<ID>UnusedPrivateProperty:RangesInKotlin.kt$val floatRange = 1.0f..10.5f</ID>
		<ID>UnusedPrivateProperty:RangesInKotlin.kt$val longRange = 0L..10L</ID>
		<ID>UnusedPrivateProperty:RangesInKotlin.kt$val oddNumbersBackwards = 19 downTo 1 step 2</ID>
		<ID>UnusedPrivateProperty:RangesInKotlin.kt$val oneThroughTenIterator = oneThroughTen.iterator()</ID>
		<ID>UnusedPrivateProperty:RangesInKotlin.kt$val openEndedIntRange: IntRange = 0 until 10 // 0-9</ID>
		<ID>UnusedPrivateProperty:RangesInKotlin.kt$val openEndedIntRangeOperator: IntRange = 0..&lt;10</ID>
		<ID>UnusedPrivateProperty:RangesInKotlin.kt$val reverseIntegralProgression = 10 downTo 1</ID>
		<ID>UnusedPrivateProperty:SelectionInKotlin.kt$val isItANumber = when (randomBinaryInt) { // All Ints are Numbers. is Number -&gt; true // And yet the compiler still requires this `else`. else -&gt; false }</ID>
		<ID>UnusedPrivateProperty:SequencesInKotlin.kt$val nope = streamBigEven + 1</ID>
		<ID>UnusedPrivateProperty:SmartCastsInKotlin.kt$val integer = thing as Int</ID>
		<ID>UnusedPrivateProperty:VarianceInKotlin.kt$val KABLAMO: String = backToStringContainer.contents</ID>
		<ID>UnusedPrivateProperty:VarianceInKotlin.kt$val anyList: List&lt;Any&gt; = stringList</ID>
		<ID>UnusedPrivateProperty:VarianceInKotlin.kt$val anyProducer: Producer&lt;Any&gt; = stringProducer</ID>
		<ID>UnusedPrivateProperty:VarianceInKotlin.kt$val anyTest = anyTester.test(any)</ID>
		<ID>UnusedPrivateProperty:VarianceInKotlin.kt$val immutableStringContainer = ImmutableContainer("Hello")</ID>
		<ID>UnusedPrivateProperty:VarianceInKotlin.kt$val indicesOfAnyAnythings = indicesOfAny(arrayOfAny)</ID>
		<ID>UnusedPrivateProperty:VarianceInKotlin.kt$val indicesOfAnyStrings = indicesOfAny(arrayOfString)</ID>
		<ID>UnusedPrivateProperty:VarianceInKotlin.kt$val indicesOfAnythings = indices(arrayOfAny)</ID>
		<ID>UnusedPrivateProperty:VarianceInKotlin.kt$val indicesOfEAnythings = indicesOf(arrayOfAny)</ID>
		<ID>UnusedPrivateProperty:VarianceInKotlin.kt$val indicesOfEStrings = indicesOf(arrayOfString)</ID>
		<ID>UnusedPrivateProperty:VarianceInKotlin.kt$val indicesOfMaybeAnyAnythings = indicesOfAny(arrayOfMaybeAny)</ID>
		<ID>UnusedPrivateProperty:VarianceInKotlin.kt$val indicesOfMaybeEAnythings = indicesOf(arrayOfMaybeAny)</ID>
		<ID>UnusedPrivateProperty:VarianceInKotlin.kt$val indicesOfStrings = indices(arrayOfString)</ID>
		<ID>UnusedPrivateProperty:VarianceInKotlin.kt$val mutableStringList = mutableListOf("Hello", "World")</ID>
		<ID>UnusedPrivateProperty:VarianceInKotlin.kt$val naiveStringTester = NaiveTester&lt;String&gt;()</ID>
		<ID>UnusedPrivateProperty:VarianceInKotlin.kt$val otherStringTest = anyTester.test(string)</ID>
		<ID>UnusedPrivateProperty:VarianceInKotlin.kt$val stringArray = arrayOf("Hello", "World")</ID>
		<ID>UnusedPrivateProperty:VarianceInKotlin.kt$val stringTest = stringTester.test(string)</ID>
		<ID>UtilityClassWithPublicConstructor:ConstantsInKotlin.kt$ConstantsInKotlinCompanion</ID>
		<ID>UtilityClassWithPublicConstructor:ConstantsInKotlinCompanion.kt$ConstantsInKotlinCompanion</ID>
		<ID>VariableNaming:VarianceInKotlin.kt$val KABLAMO: String = backToStringContainer.contents</ID>
	</CurrentIssues>
</SmellBaseline>
